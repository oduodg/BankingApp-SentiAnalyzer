# -*- coding: utf-8 -*-
"""특정 단어가 포함된 문장 살펴보기.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l8wpO52h7ItnKK0gaSl9Fy9Mbc0T_5Q7

# 1. 코랩 환경 설정
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# 디렉토리 변경
# %cd drive/MyDrive/PBL

# 현재 디렉토리 경로 확인
!pwd

"""# 2. 형태소 분석"""

pip install PyKomoran

import pandas as pd
from PyKomoran import *
import sys
import regex
import warnings 
import copy
from tqdm import tqdm

warnings.filterwarnings('ignore')

"""## 사용자 정의 사전 등록"""

# STABLE or EXP
komoran = Komoran("EXP")
komoran.set_user_dic("user_dictionary.txt")  #사용자 정의 사전 등록

"""## 분석데이터 불러오기"""

#분석할 리뷰들이 담겨져 있는 데이터 프레임 불러오기
koreanCity_review = pd.read_csv("/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/리뷰 데이터/한국씨티은행/raw/씨티.csv")
koreanCity_review.head()

#2021년 리뷰만 뽑기(어플은 업데이트를 통해서 계속 변하기 때문에 오래된 리뷰는 신뢰할 수 없다고 판단!)
koreanCity_review2021 = koreanCity_review[koreanCity_review['date'].str.contains('2021')]
koreanCity_review2021.tail()

#userName 삭제
koreanCity_review2021 = koreanCity_review2021.drop(['userName'], axis = 'columns')
koreanCity_review2021.columns

koreanCity_review2021.head()

"""# 특정 단어가 들어가 있는 문장 살펴보기

## 코모란으로 쪼갠 형태에서 특정 단어 찾아 해당 리뷰 정보 리턴하는 함수
**find_review1**
"""

## find_review1(리뷰가 포함되어 있는 데이터 프레임) : 형태소 분석기로 문장을 쪼갰을 때 찾고자 하는 단어가 들어가 있는 경우 출력
## comment(리뷰)가 포함되어 있는 데이터 프레임 넣으면 특정단어를 가지는 리뷰들을 리턴해주는 함수
def find_review1(df):
  w = input('단어를 넣어주세요 : ')
  #개별 리뷰에 대해 문장 쪼개기
  komoran_result = []
  for i in range(len(df['comment'])):
    r = df['comment'][i]
    result = Seperator_part(r)
    komoran_result.append(result)

  #쪼갠 성분 중에 해당 단어 있는 리뷰들 모두 뽑아냄
  review_num = []

  for r in komoran_result:
    word_list = []
    for i in range(len(r)):
      word_list.append(r[i][0])
      
    if w in word_list:
      n = komoran_result.index(r)
      review_num.append(n)

  review_in_word = df.loc[review_num]
  return review_in_word

# 단어와 품사 넣으면 품사로 인식되는 단어를 포함하는 문장 출력 (같은 단어지만 다른 품사로 인식되는 경우 고려해서 만든것임)
def find_review1_2(df,p):
  w = input('단어를 넣어주세요 : ')

  #개별 리뷰에 대해 문장 쪼개기
  komoran_result = []
  for i in range(len(df['comment'])):
    r = df['comment'][i]
    result = Seperator_part(r)
    komoran_result.append(result)

  #쪼갠 성분 중에 해당 단어 있는 리뷰들 모두 뽑아냄
  review_num = []

  for r in komoran_result:
    word_list = []
    for i in range(len(r)):
      if r[i][1] == p:
        word_list.append(r[i][0])
      
    if w in word_list:
      n = komoran_result.index(r)
      review_num.append(n)

  review_in_word = df.loc[review_num]
  return review_in_word

"""## 특정 단어가 들어가 있는 모든 리뷰들에 대한 정보를 리턴해주는 함수
**find_review2**
"""

# 문장 쪼개서 찾고자 하는 단어 찾는 게 아니라 그냥 문장에서 해당 단어 들어 있는 것들 싹다 출력 (실행시간 짧음^^)
def find_review2(df):
  w = input('단어를 넣어주세요 : ')
  num = []
  for i in range(len(df['comment'])):
    if w in df['comment'][i]:
      num.append(i)

  return df.loc[num]

#1, 1_2, 2 중에 하나 택해서 사용하면 됩니다!!! (사용하실 때 셋 중 사용할 함수 1개를 제외하곤 주석처리하고 돌려주세요~)

#particular_review = find_review1(koreanCity_review2021)
#particular_review = find_review1_2(koreanCity_review2021, 'NNP')
particular_review = find_review2(koreanCity_review2021)
particular_review

#뽑아낸 리뷰 전체 내용 보기 위해 한줄한0줄 출력
for i in particular_review['comment']:
  print(i)
  print('-'*50)

"""# 코모란이 문장 쪼개는 형태 바로바로 확인할 수 있는 알고리즘"""

while (1):
  munzang = input('문장을 입력하세요(종료시 그만 을 써주세요): ')
  
  if munzang == '그만':
    break;
  
  print(Seperator_part(munzang))

#한줄에 대해서만 하고 싶을 때
Seperator_part('어플이 왜 안들어가지나요?')