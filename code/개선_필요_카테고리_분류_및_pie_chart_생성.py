# -*- coding: utf-8 -*-
"""개선 필요 카테고리 분류 및 pie chart 생성.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t1d3TkcdlcCK_ujyLFzrd029hh2AD8Pm
"""

# 필요한 라이브러리 설치
!pip install konlpy

# 필요한 패키지 및 함수 import
import io # io없이 pandas만 import할 경우 오류 발생
import pandas as pd
import csv
from konlpy.tag import Komoran
from collections import Counter
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sns
import random

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
plt.rc('font', family='NanumBarunGothic')

# 드라이브에 연결
from google.colab import drive
drive.mount('/content/drive')

komoran = Komoran(userdic='/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/user_dictionary.txt')

# 은행 리뷰 데이터 불러오기
city = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/city_problems.csv')
hana = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/hana_problems.csv')
k = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/k_problems.csv')
kakao = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/kakao_problems.csv')
kb = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/kb_problems.csv')
nh = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/nh_problems.csv')
sc = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/sc_problems.csv')
sh = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/sh_problems.csv')
shinhan = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/shinhan_problems.csv')
toss = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/toss_problems.csv')
woori = pd.read_csv('/content/drive/Shareddrives/언어의미와정보 데이터캡스톤디자인/개선 필요 리뷰/woori_problems.csv')

# 은행 설정
bank = woori
bank_name = 'woori'
bank = bank.drop(columns=['Unnamed: 0'])
bank.head()

bank.tail()

# 분석 대상에 포함된 품사의 단어만 추출
'''
일반명사(NNG), 고유명사(NNP), 형용사(VA), 동사(VV), 어근(XR)
'''
tag_list = ['NNG','NNP','VA','VV','XR']

def remove_word_by_tag(token,tag):
  temp = list()
  for k in range(len(token)):
    if token[k][1] in tag:
      temp.append(token[k])
    else:
      continue
  return temp

# 형태소 및 품사 분리
comment_token = []
for comment in bank['comment']:
  tokens = komoran.pos(comment) # 형태소 분석
  tokens = remove_word_by_tag(tokens,tag_list) # 고려하는 품사만 남기기
  comment_token.append(tokens)

print(comment_token)
print(len(comment_token))

# 품사를 제거하고 단어만 리스트에 추가
word_list = []
for tokens in comment_token:
  line = []
  for token in tokens:
    line.append(token[0])
  word_list.append(line)

print("WORD LIST를 출력합니다.")
print(word_list)

# 카테고리 분류(오류, 속도, 사용성)
error_list = ['오류','장애','통신장애','에러','먹통','설치','인식','알람','꺼지','끄','켜','멈추','삭제','재설치',
         '안되','안 되','통신','부팅','재부팅','종료','접속']
reaction_list = ['반응속도','속도','느리','반응','로딩']
usability_list = ['불편','편의','편리','어렵','힘들','UX','ux','UI','ui','UIUX','uiux','UXUI','uxui',
             '아이콘','디자인','버튼','심플','한눈','한눈에','편의성','통합','안내','통일','인터페이스',
             '배너','글씨체','글씨','폰트','메뉴','복잡','답답']

error = 0
reaction = 0
usability = 0

for i in range(len(word_list)):
  for word in word_list[i]:
    if error <= i and word in error_list:
      error += 1
    elif reaction <= i and word in reaction_list:
      reaction += 1
    elif usability <= i and word in usability_list:
      usability += 1

print('오류:', error)
print('속도:', reaction)
print('사용성:', usability)

# 파이 차트 시각화
sum = error + reaction + usability

ratio = [error/sum, reaction/sum, usability/sum]

x_label = ['오류','속도','사용성']
plt.pie(ratio, # 비율 값
        labels=x_label, # 라벨 값
        autopct='%.1f%%', # 부채꼴 안에 표시될 숫자 형식(소수점 1자리까지 표시)
        startangle=90, # 축이 시작되는 각도 설정
        counterclock=True, # True: 시계방향순 , False:반시계방향순
        #explode=[0.05,0.05,0.05,0.05], # 중심에서 벗어나는 정도 표시
        shadow=True, # 그림자 표시 여부
        colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0'], # colors=['gold','silver','whitesmoke','gray']
        wedgeprops = {'width':0.7,'edgecolor':'w','linewidth':3}
        ) #width: 부채꼴 영역 너비,edgecolor: 테두리 색 , linewidth : 라인 두께
plt.title(bank_name + ' 개선 필요 카테고리', fontsize=16)

#plt.show()
plt.savefig(bank_name + '_pie_chart.jpg')

#@title
# 단어 빈도수에 따른 히스토그램 그리기
temp = {i: j for i, j in count.items() if j >= 6} # 딕셔너리 컴프리헨션
temp1 = sorted(temp.items(), key=(lambda x: x[1]), reverse=True)
temp2 = dict(temp1)

# 한글 폰트 적용
plt.rc('font', family='NanumBarunGothic') 
# 캔버스 사이즈 적용
plt.rcParams["figure.figsize"] = (15, 6)
plt.rc('font', family='NanumBarunGothic') 
plt.xticks(rotation=50)
plt.bar(temp2.keys(), temp2.values(), color='mediumpurple')
plt.savefig('histogram.jpg')

#@title
<# 의미 없는 단어 제거
def remove_values_from_list(the_list, val):
   return [value for value in the_list if value != val]

remove_list = ['개선','사용','필요','후','게','때','은행','해결','시티','씨티','씨티은행','계',
               '비밀','번호','확인','정도','이후','결국','불편']

for i in remove_list:
  while i in word_list:
    word_list.remove(i)
    #word_list = remove_values_from_list(word_list, remove_list[i])

print(word_list)

#@title
print('중복 포함 단어 개수:', len(word_list))
word_cnt = len(set(word_list))
print('중복 제거 단어 개수:', word_cnt)

count = Counter(word_list)
print(count)

#@title
ratio = [34, 32, 16, 18]
labels = ['Apple', 'Banana', 'Melon', 'Grapes']
explode = [0, 0.10, 0, 0.10]

#plt.pie(ratio, labels=labels, autopct='%.1f%%', startangle=260, counterclock=False, explode=explode)
#plt.show()


# 단어 빈도수에 따른 히스토그램 그리기
n = 11
temp = {i: j for i, j in count.items() if j >= n} # 딕셔너리 컴프리헨션
temp1 = sorted(temp.items(), key=(lambda x: x[1]), reverse=True)
temp2 = dict(temp1)
#plt.bar(temp2.keys(), temp2.values(), color='mediumpurple')
print(temp2)

total = sum(temp2.values())
print(total)
ratio = [count/total*100 for count in temp2.values()]
print(ratio)

#@title
# 워드 클라우드 생성
wordcloud = WordCloud(font_path='/content/NanumGothicCoding.ttf',
                      width = 800, height = 800,
                      background_color = "black")

def purple_color_func(word, font_size, position,orientation,random_state=None, **kwargs):
    return("hsl({:d},{:d}%, {:d}%)".format(random.randint(212,313),random.randint(26,32),random.randint(45,80)))

# 가장 많이 나온 단어 n개에 대해 생성
n = 40
count = Counter(word_list)
tags = count.most_common(n)
wc2 = wordcloud.generate_from_frequencies(dict(tags))
wc2.recolor(color_func = purple_color_func)
wc2.to_file('wordcloud.jpg')